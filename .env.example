###############################################################################
#                                ↓ REQUIRED ↓                                 #
###############################################################################

# RPC URL for the L1 network to sync from.
L1_RPC_URL=
L1_BEACON_RPC_URL=

###############################################################################
#                     ↓ ONLY FOR RUNNING RPC NODE ↓                           #
###############################################################################

# Comma separated enode URLs for P2P discovery bootstrap.
# Preset with the Sigil enode URL.  No need to change
GETH_BOOTNODES=enode://4e466a19439fa9972695c2f5fff1001fc793d1cf0f413ff9ccca918d1abdd7c628cfe24acfab3722946d0513fddbf120558e55d232aaeed384b3b7c8a2ceb164@162.243.185.44:30303

# Comma-separated multiaddr-format(an unsigned address, containing: IP, TCP port,
# PeerID) peer list. Static connections to make and maintain, these peers will be
# regarded as trusted. Addresses of the local peer are ignored.
# Duplicate/Alternative addresses for the same peer all apply, but only a single
# connection per peer is maintained.
# Preset with the Sigil Sequencer multiaddr.  No need to change
SEQUENCER_MULTIADDR=/ip4/162.243.185.44/tcp/9222/p2p/16Uiu2HAm1vZtti6kqCYNkxzsbbc6ToQwH4EAha81cLGM4VJyiwWy

# Address of the sigil sequencer.  eth_sendRawTransaction will be routed to this sequencer
# Preset with the Sigil sequencer geth URL.  No need to change
SIGIL_SEQUENCER=http://162.243.185.44:8545

###############################################################################
#                   ↓ ONLY FOR RUNNING SEQUENCER NODE ↓                       #
###############################################################################

### op-stack
# Sepolia chain id
L1_CHAIN_ID=11155111
# Sigil chain id
L2_CHAIN_ID=51611
GS_BATCHER_ADDRESS=
GS_BATCHER_PRIVATE_KEY=
GS_SEQUENCER_ADDRESS=
GS_SEQUENCER_PRIVATE_KEY=
L1_BLOCK_TIME=12
L2_BLOCK_TIME=4

### op-succinct-validity
# Address that submits the aggregation proof for validation
PRIVATE_KEY=
# Contract address of the op-succinct L2 Output Oracle contract
L2OO_ADDRESS=
# Contract address of the op-succinct dispute game factory
DGF_ADDRESS=
# TODO: support cpu or local cuda proofs
SP1_PROVER=network
# Succinct prover network rpc.  Usually a self-hosted hierophant instance
NETWORK_RPC_URL=
# Succinct prover network authenticated private key.  If you're running Hierophant
# this can be any private key
NETWORK_PRIVATE_KEY=
# How many blocks per span proof
RANGE_PROOF_INTERVAL=
# How many blocks per agg proof
SUBMISSION_INTERVAL=
# How many provers working concurrently
MAX_CONCURRENT_PROOF_REQUESTS=

###############################################################################
#                                ↓ OPTIONAL ↓                                 #
###############################################################################

# used by both node and sequencer
PORT__OP_GETH_HTTP=
PORT__OP_GETH_WS=
PORT__OP_GETH_P2P=
PORT__OP_NODE_P2P=
PORT__OP_NODE_HTTP=
# The kind of RPC provider, used to inform optimal transactions receipts
# fetching. Valid options: reth, alchemy, quicknode, infura, parity, nethermind,
# debug_geth, erigon, basic, any.  Defaults to `standard`
L1_RPC_KIND=

# used by just rpc node
# Type of node to run ("full" or "archive"), note that "archive" is bigger
NODE_TYPE=full

# used by just sequencer
PORT__OP_SUCCINCT_VALIDITY_HTTP=
PORT__OP_BATCHER_HTTP=
# if you want to use a remote db instead of the postgres container in docker-compose.sequencer.yml
OP_SUCCINCT_VALIDITY_DATABASE_URL=
